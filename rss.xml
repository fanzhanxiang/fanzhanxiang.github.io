<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>fanzhanxiang&#39; Blog</title>
    <link>https://github.com/fanzhanxiang/fanzhanxiang.github.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>2194482952@qq.com</description>
    <pubDate>Wed, 01 Nov 2017 06:56:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Ajax</title>
      <link>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/31/ajax/</link>
      <guid>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/31/ajax/</guid>
      <pubDate>Tue, 31 Oct 2017 09:32:52 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Ajax:async javascript and xml 叫做异步的JS和XML(可扩展标记语言)，它是一种客户端的JS方法，用来向服务器端发送请求(还可以传递给服务器数据)，然后把服务器端返回的内容获取到，它一般运行在客户端的浏览器中的。&lt;/p&gt;
&lt;h2 id=&quot;Aja
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Ajax:async javascript and xml 叫做异步的JS和XML(可扩展标记语言)，它是一种客户端的JS方法，用来向服务器端发送请求(还可以传递给服务器数据)，然后把服务器端返回的内容获取到，它一般运行在客户端的浏览器中的。</p><h2 id="Ajax的四个步骤"><a href="#Ajax的四个步骤" class="headerlink" title="Ajax的四个步骤"></a>Ajax的四个步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1、var xhr=new XMLHttpRequest;   </div><div class="line">2、xhr.open(&quot;请求方式&quot;,&quot;请求资源的地址&quot;,&quot;同步还是一异步（同步用false，异步用true）&quot;,[username],[userpass]);  </div><div class="line">3、xhr.onreadyStatechange=function()&#123;if(xhr.readyState===4 &amp;&amp; /^2\d&#123;2&#125;.text(xhr.status))&#123;var val=xhr.responseText&#125;&#125;;  </div><div class="line">4、xhr.send(&quot;要传递给服务器的内容&quot;);</div></pre></td></tr></table></figure><h2 id="1、第一步"><a href="#1、第一步" class="headerlink" title="1、第一步"></a>1、第一步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1、var xhr=new XMLHttpRequest;</div></pre></td></tr></table></figure><p>创建一个AJAX对象（在IE6及更低版本的浏览器中不支持）</p><h2 id="2、第二步"><a href="#2、第二步" class="headerlink" title="2、第二步"></a>2、第二步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2、xhr.open(&quot;请求方式&quot;,&quot;请求资源的地址&quot;,&quot;同步还是一异步（同步用false，异步用true）&quot;,[username],[userpass]);</div></pre></td></tr></table></figure><p>发送前的基本信息配置：配置请求方式(GET、POST、PUT、DELETE、HEAD),默认是异步,username:向服务器提供的用户名,userpass:向服务器提供的用户密码，这两个值一般都不写，只有服务器做了安全限制，只允许特定的用户访问，我们才传递过去。</p><h2 id="3、第三步"><a href="#3、第三步" class="headerlink" title="3、第三步"></a>3、第三步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3、xhr.onreadyStatechange=function()&#123;if(xhr.readyState===4 &amp;&amp; /^2\d&#123;2&#125;.text(xhr.status))&#123;var val=xhr.responseText&#125;&#125;;</div></pre></td></tr></table></figure><p>给<strong>onreadyStatechange</strong>这个事件绑定一个方法，监听状态的改变(只要状态改变，就会触发这个事件绑定的相应方法执行)；</p><p><strong>xhr.readyState</strong>：AJAX状态码其中有5个值（0,1,2,3,4），可以代表当前AJAX处理的进度。</p><blockquote><pre><code>0：&quot;unset&quot;，表示当前的请求还没有发送；1：&quot;opened&quot;,表示URL地址已经打开(发送前的参数配置已经完成)；2：&quot;headers_received&quot;,表示响应头信息已经接收；3：&quot;loading&quot;,主要返回的内容正在服务器端进行准备处理；4：&quot;done&quot;:响应主体的内容已经成功返回客户端。</code></pre></blockquote><p><strong>xhr.status</strong>:HTTP网络状态码，描述了服务器响应内容的状态，HTTP网络状态码有如下几种：</p><blockquote><pre><code>200 OR ^2\d{2}： (200或者以2开头的)都代表响应主体的内容已经成功返回了301：永久重定向/永久转移302：临时重定向/临时转移,服务器的负载均衡304：本次获取的内容是读取缓存中的数据400:客户端传递给服务器端的参数出现错误，客户端传递的参数有问题401：无权限访问404：访问的地址不存在500：未知的服务器错误503：服务器已经超负荷了，比如能承受10000人，那么第10001个人访问，如果没有做服务器的负载均衡（302），那么这个人的状态码就是503;</code></pre></blockquote><h2 id="4、第四步"><a href="#4、第四步" class="headerlink" title="4、第四步"></a>4、第四步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4、xhr.send(&quot;要传递给服务器的内容&quot;);</div></pre></td></tr></table></figure><p>发送请求：参数是请求主体中给传递给服务器的内容；只有执行完第四步之后才开始一个AJAX请求。</p>]]></content:encoded>
      
      <comments>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/31/ajax/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DOM0级事件绑定和DOM2级事件及其扩展</title>
      <link>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/27/DOM2%E7%BA%A7%E4%BA%8B%E4%BB%B6/</link>
      <guid>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/27/DOM2%E7%BA%A7%E4%BA%8B%E4%BB%B6/</guid>
      <pubDate>Fri, 27 Oct 2017 08:06:22 GMT</pubDate>
      <description>
      
        &lt;p&gt; 在页面上写一个id为box的一个div，然后设置一些它的宽度和高度，然后在后面在做事件绑定的时使用。先是使用DOM0级事件绑定。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;box.onclick=function()&amp;#123;console.log(1)&amp;#125;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;box.onclick=function()&amp;#123;console.log(2)&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 后面这个事件会把前一个事件给覆盖掉，最后在控制台中只会输出一个2.因为在使用DOM0级事件绑定的时候，&lt;strong&gt;只能给元素的某一个行为绑定一次方法，第二次绑定会把前面的覆盖掉&lt;/strong&gt;（这里主要是某一个行为绑定一次方法，不同的行为是可以绑定同一个方法的，比如这里是&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;box.onclick=function()&amp;#123;console.log(2)&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里是可以输出2的）；所以最后在控制台只能输出一次2。DOM0级事件绑定和DOM2级事件绑定最大的区别也是在这里，但是DOM2级事件中也有一些其他特别的地方。&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p> 在页面上写一个id为box的一个div，然后设置一些它的宽度和高度，然后在后面在做事件绑定的时使用。先是使用DOM0级事件绑定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">box.onclick=function()&#123;console.log(1)&#125;;  </div><div class="line">box.onclick=function()&#123;console.log(2)&#125;;</div></pre></td></tr></table></figure><p> 后面这个事件会把前一个事件给覆盖掉，最后在控制台中只会输出一个2.因为在使用DOM0级事件绑定的时候，<strong>只能给元素的某一个行为绑定一次方法，第二次绑定会把前面的覆盖掉</strong>（这里主要是某一个行为绑定一次方法，不同的行为是可以绑定同一个方法的，比如这里是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">box.onclick=function()&#123;console.log(2)&#125;;</div></pre></td></tr></table></figure></p><p>这里是可以输出2的）；所以最后在控制台只能输出一次2。DOM0级事件绑定和DOM2级事件绑定最大的区别也是在这里，但是DOM2级事件中也有一些其他特别的地方。<br><a id="more"></a></p><h2 id="1、基础；"><a href="#1、基础；" class="headerlink" title="1、基础；"></a>1、基础；</h2><p>当我们使用DOM2级事件绑定，它的原理是让box通过原型链一直找到EventTarget这个内置类原型上的addEventListener方法实现的。DOM2级事件绑定解决了DOM0级事件绑定中“只能给元素的某一个行为绑定一次方法，第二次绑定会把前面的覆盖掉”这个问题，比如下面代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">box.addEventListener(&quot;click&quot;,function()&#123;console.log(1)&#125;,false);         </div><div class="line">box.addEventListener(&quot;click&quot;,function()&#123;console.log(1)&#125;,false);</div></pre></td></tr></table></figure><p>点击box的时候，控制台上输出了1和2，方法中的第三个参数false表示的是该事件在冒泡阶段触发。总结出DOM2级事件可以给某一个元素的同一个行为绑定多个不同的方法。</p><h2 id="2、DOM2；"><a href="#2、DOM2；" class="headerlink" title="2、DOM2；"></a>2、DOM2；</h2><p> DOMO中行为类型，我们用DOM2一样可以绑定；而且DOM2中还提供了DOM0中没有的行为类型，比如DOM2中有一个行为<strong>DOMContentLoaded</strong>（当页面中的DOM结构或者是叫HTML结构加载完成触发的行为）这个行为是DOM0中没有的。像这个事件的绑定是这样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">document.addEventListener(&quot;DOMContentLoaded&quot;,function()&#123;&#125;,false) ;  </div><div class="line">window.onload=function()&#123;&#125;;</div></pre></td></tr></table></figure><p>上面的两个事件绑定是有区别的，这个代表的意思是当页面中所有的资源都加载完成（图片、HTML结构、音视频…）才会执行后面的函数；并且在一个页面中只能使用一次，后面再写会把前面的覆盖掉，因为它是DOM0事件绑定，所以只能绑定一次。<br>并且在jQuery中也提供了类似的方法 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(document).ready(function()&#123;&#125;)---&gt;$(function()&#123;&#125;);</div></pre></td></tr></table></figure><p>只要也拿中的HTML结构加载完成就会执行对应的函数；并且在一个页面中可以出现多次，因为jQuery在写这个方法的时候是使用DOM2级事件绑定来写的，并且绑定的行为是DOM2中的“DOMContentLoaded”这个行为来绑定的。</p><h2 id="3、移除DOM2事件绑定："><a href="#3、移除DOM2事件绑定：" class="headerlink" title="3、移除DOM2事件绑定："></a>3、移除DOM2事件绑定：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">box.addEventListener(&quot;click&quot;,function(e)&#123;console.log(this)&#125;,false);</div><div class="line">box.removeEventListener(&quot;click&quot;,function(e)&#123;console.log(this)&#125;,false)； </div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">里面的this是box，这里并不能移除事件绑定，因为两个匿名函数是两个不同的堆内存，因此不能移除事件绑定；把匿名函数换成实名函数就可以了，比如 ：</div></pre></td></tr></table></figure><p>function fn1(){console.log(this)}；<br>box.removeEventListener(“click”,fn1,false)；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这里就可以实现移除了，并且在控制台中不会输出任何东西，因为在刚绑定的时候就已经移除了。</div><div class="line">移除的时候需要保证三个参数：行为、方法、那个阶段发生，一个都不能差，因为在使用DOM2事件绑定的时候，我们一般绑定的都是实名函数，如果这样：</div></pre></td></tr></table></figure><p>box.removeEventListener(“click”,fn1,true)；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">就移除掉了，还会输出this；</div><div class="line"></div><div class="line">## 4、注意点 ##</div><div class="line"></div><div class="line">只能给某个元素的同一个行为绑定多个“**不同**”的方法（如果方法相同了，只能留一个），例如：</div></pre></td></tr></table></figure></p><p>function fn1(){console.log(1)}；<br>box.removeEventListener (“click”,fn1,false)；<br>box.removeEventListener(“click”,fn1,false)；</p><p>```</p><p>在点击的时候只会输出一个1。当行为触发，会按照绑定的先后顺序依次把绑定的方法执行；执行的方法中的this是当前被绑定事件的本身。并且在绑定方法的时候，浏览器天生自带的一个东西叫事件池（也有叫程序池的），用来存储绑定的事件的。</p><p>  但是在IE6~8浏览器中不支持addEventListener/removeEventListener,如果想要实现DOM2级事件绑定只能用attachEvent,移除是使用detachEvent。  box.attachEvent(“onclick”,fn1);<br>  并且它只有两个参数，不能向addEventListener那样控制在那个阶段发生，只能在冒泡阶段发生，行为需要添加”on”,和DOM0特别类似</p>]]></content:encoded>
      
      <comments>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/27/DOM2%E7%BA%A7%E4%BA%8B%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>搭建个人博客的感受</title>
      <link>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/15/%E5%8D%9A%E5%AE%A2%E5%B0%8F%E6%80%BB%E7%BB%93/</link>
      <guid>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/15/%E5%8D%9A%E5%AE%A2%E5%B0%8F%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Sun, 15 Oct 2017 11:00:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;今天注册了一个hexo+GitHub的一个博客。下面的是一些自己一些的感受。改天有时间写一个详细版的教程关于建立个人博客的。虽然网上已经有很多了，但是自己还是有不少想要分享的地方，下面的是最简单的几点，也是自己写的第一篇博客。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>今天注册了一个hexo+GitHub的一个博客。下面的是一些自己一些的感受。改天有时间写一个详细版的教程关于建立个人博客的。虽然网上已经有很多了，但是自己还是有不少想要分享的地方，下面的是最简单的几点，也是自己写的第一篇博客。</p><a id="more"></a><ul><li><p>1、<strong>_config</strong>的语法非常严谨、当你要用里面的语法的时候首先需要做的一件事情把对应地方的#去掉，如果不把你想要设置的对应的地方的#去掉，当你在执行hexo g的时候会报或者是 你设置的这个地方对应的效果没有效果。</p></li><li><p>2、<strong>_config</strong>在设置的时候，”：“后面必须一个空格，这也是因为_config的语法比较严谨的原因</p></li><li><p>3、<strong>GitHub</strong>有缓存时间，这是一个比较令人头疼的问题，自己在_config设置完所有的参数之后，然后执行hexo g、hexo d.然后是过了几分钟之后自己打开了自己博客，发现竟然返回了404页面，当时也是比较懵逼的，然后就一直谷歌上面各种找原因。看到一个人回答说是GitHub的缓存原因。这才放心，后面等了一会儿之后设置的东西相应的显示出来了。</p></li></ul><p>总结：总的来说大体常见的问题就是这些。在打扮博客的过程中肯定会碰到各种各样的问题，抽时间来一个大总结。</p>]]></content:encoded>
      
      <comments>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/15/%E5%8D%9A%E5%AE%A2%E5%B0%8F%E6%80%BB%E7%BB%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/11/hello-world/</link>
      <guid>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/11/hello-world/</guid>
      <pubDate>Wed, 11 Oct 2017 06:05:37 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content:encoded>
      
      <comments>https://github.com/fanzhanxiang/fanzhanxiang.github.io/2017/10/11/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
